@* Remove this section if you are using bundling *@
@section Scripts {
    <script src="~/Scripts/jquery.validate.min.js"></script>
    <script src="~/Scripts/jquery.validate.unobtrusive.min.js"></script>
}


@{
    Layout = "~/_SiteLayoutLogin.cshtml";
    Page.Title = "Log in";

    // Initialize general page variables
    var email = "";
    var password = "";
    var rememberMe = false;

    var returnUrl = Request.QueryString["ReturnUrl"];
    if (returnUrl.IsEmpty())
    {
        // Some external login providers always require a return URL value
        returnUrl = Href("~/");
    }


    // If this is a POST request, validate and process data
    if (IsPost && Request.Form.Count < 4)
    {
        // Setup validation
        Validation.RequireField("email", "You must specify an email address.");
        Validation.RequireField("password", "You must specify a password.");
        Validation.Add("password",
            Validator.StringLength(
                maxLength: Int32.MaxValue,
                minLength: 6,
                errorMessage: "Password must be at least 6 characters"));

        AntiForgery.Validate();
        // is this an external login request?
        string provider = Request.Form["provider"];
        if (!provider.IsEmpty())
        {
            OAuthWebSecurity.RequestAuthentication(provider, Href("~/Account/RegisterService", new { returnUrl }));
            return;
        }
        else if (Validation.IsValid())
        {
            email = Request.Form["email"];
            password = Request.Form["password"];
            rememberMe = Request.Form["rememberMe"].AsBool();

            if (WebSecurity.UserExists(email) && WebSecurity.GetPasswordFailuresSinceLastSuccess(email) > 4 && WebSecurity.GetLastPasswordFailureDate(email).AddSeconds(60) > DateTime.UtcNow)
            {
                Response.Redirect("~/Account/AccountLockedOut");
                return;
            }

            // Attempt to log in using provided credentials
            if (WebSecurity.Login(email, password, rememberMe))
            {
                Context.RedirectLocal(returnUrl);
                return;
            }
            else
            {
                ModelState.AddFormError("The user name or password provided is incorrect.");
            }
        }
    }
}

<hgroup class="title">

    <h1><img src="~/Images/SoegtiLogo.png" /></h1>
</hgroup>

<section class="social" id="loginForm">
    <h2>Hello There,</h2>
    <h2>Welcome to Sogeti</h2>
   
    @* If one or more validation errors exist, show an error *@
    @Html.ValidationSummary("Log in was unsuccessful. Please correct the errors and try again.", excludeFieldErrors: true, htmlAttributes: null)
    <div class="container">

        <form method="post" name="register">
            @AntiForgery.GetHtml()
            <div class="form-group">
                <h5>Sign In</h5>
            </div>
            <div class="form-group">
                <label for="email" @if (!ModelState.IsValidField("email")) { <text> class="error-label" </text> }>Email address</label>
                <input type="text" class="form-control" id="email" name="email" inputmode="email" style="background-color:maroon;border-bottom-color:peru;border:none;border-bottom:solid;border-bottom-style:solid;" value="@email" @Validation.For("email") />
                @* Write any user name validation errors to the page *@
                @Html.ValidationMessage("email")

            </div>
            <div class="form-group">
                <label for="password" @if (!ModelState.IsValidField("password")) { <text> class="error-label" </text> }>Password</label>
                <input type="password" class="form-control" style="background-color:maroon;border-bottom-color:peru;border:none;border-bottom:solid;border-bottom-style:solid;" id="password" name="password" @Validation.For("password") />
                @* Write any password validation errors to the page *@
                @Html.ValidationMessage("password")
            </div>



            <div class="form-group">
                <input type="submit" value="Sign in" />
            </div>
            <div class="form-group">
                <a href="~/Account/ForgotPassword">Forget password?</a>
            </div>



        </form>
    </div>
    <p>


    </p>
</section>

<section class="social" id="socialLoginForm">

    <h1>Register </h1>
    @{

        Page.Title = "Register";

        // Initialize general page variables
        //var email = "";
        //var password = "";
        var confirmPassword = "";

        // Setup validation
        Validation.RequireField("email1", "You must specify an email address.");
        Validation.RequireField("password1", "Password cannot be blank.");
        Validation.Add("confirmPassword",
        Validator.EqualsTo("password1", "Password and confirmation password do not match."));
        Validation.Add("password1",
            Validator.StringLength(
                maxLength: Int32.MaxValue,
                minLength: 6,
                errorMessage: "Password must be at least 6 characters"));

        // If this is a POST request, validate and process data
        if (IsPost)
        {
            AntiForgery.Validate();
            email = Request.Form["email1"];
            password = Request.Form["password1"];
            confirmPassword = Request.Form["confirmPassword"];

            // Validate the user's captcha answer
            // if (!ReCaptcha.Validate("PRIVATE_KEY")) {
            //     ModelState.AddError("recaptcha", "Captcha response was not correct");
            // }

            // If all information is valid, create a new account
            if (Validation.IsValid())
            {
                // Insert a new user into the database
                var db = Database.Open("StarterSite");

                // Check if user already exists
                var user = db.QuerySingle("SELECT Email FROM UserProfile WHERE LOWER(Email) = LOWER(@0)", email);
                if (user == null)
                {
                    // Insert email into the profile table
                    db.Execute("INSERT INTO UserProfile (Email) VALUES (@0)", email);

                    // Create and associate a new entry in the membership database.
                    // If successful, continue processing the request
                    try
                    {
                        bool requireEmailConfirmation = !WebMail.SmtpServer.IsEmpty();
                        var token = WebSecurity.CreateAccount(email, password, requireEmailConfirmation);
                        if (requireEmailConfirmation)
                        {
                            var hostUrl = Request.Url.GetComponents(UriComponents.SchemeAndServer, UriFormat.Unescaped);
                            var confirmationUrl = hostUrl + VirtualPathUtility.ToAbsolute("~/Account/Confirm?confirmationCode=" + HttpUtility.UrlEncode(token));

                            WebMail.Send(
                                to: email,
                                subject: "Please confirm your account",
                                body: "Your confirmation code is: " + token + ". Visit <a href=\"" + confirmationUrl + "\">" + confirmationUrl + "</a> to activate your account."
                            );
                        }

                        if (requireEmailConfirmation)
                        {
                            // Thank the user for registering and let them know an email is on its way
                            Response.Redirect("~/Account/Thanks");
                        }
                        else
                        {
                            // Navigate back to the homepage and exit
                            WebSecurity.Login(email, password);

                            Response.Redirect("~/");
                        }
                    }
                    catch (System.Web.Security.MembershipCreateUserException e)
                    {
                        ModelState.AddFormError(e.Message);
                    }
                }
                else
                {
                    // User already exists
                    ModelState.AddFormError("Email address is already in use.");
                }
            }
        }
    }
    <form method="post" name="Register" title="register">
        @AntiForgery.GetHtml()
        @* If at least one validation error exists, notify the user *@
        @Html.ValidationSummary("Account creation was unsuccessful. Please correct the errors and try again.", excludeFieldErrors: true, htmlAttributes: null)

        <fieldset>
            <legend>Registration Form</legend>
            <ol>
                <li class="email">
                    <label for="email1" @if (!ModelState.IsValidField("email")) { <text> class="error-label" </text> }>Email address</label>
                    <input type="text" id="email1" name="email1" style="background-color:maroon;border-bottom-color:peru;border:none;border-bottom:solid;border-bottom-style:solid;" value="@email" @Validation.For("email1") />
                    @* Write any email validation errors to the page *@
                    @Html.ValidationMessage("email1")
                </li>
                <li class="password">
                    <label for="password1" @if (!ModelState.IsValidField("password")) { <text> class="error-label" </text> }>Password</label>
                    <input type="password" id="password1" style="background-color:maroon;border-bottom-color:peru;border:none;border-bottom:solid;border-bottom-style:solid;" name="password1" @Validation.For("password1") />
                    @* Write any password validation errors to the page *@
                    @Html.ValidationMessage("password1")
                </li>
                <li class="confirm-password">
                    <label for="confirmPassword" @if (!ModelState.IsValidField("confirmPassword")) { <text> class="error-label" </text> }>Confirm password</label>
                    <input type="password" id="confirmPassword" style="background-color:maroon;border-bottom-color:peru;border:none;border-bottom:solid;border-bottom-style:solid;" name="confirmPassword" @Validation.For("confirmPassword") />
                    @* Write any password validation errors to the page *@
                    @Html.ValidationMessage("confirmPassword")
                </li>
                <li class="recaptcha">
                    <div class="message-info">
                        <p>
                            To enable CAPTCHA verification, <a href="https://go.microsoft.com/fwlink/?LinkId=204140">
                                install the
                                ASP.NET Web Helpers Library
                            </a> and uncomment ReCaptcha.GetHtml and replace 'PUBLIC_KEY'
                            with your public key. At the top of this page, uncomment ReCaptcha. Validate and
                            replace 'PRIVATE_KEY' with your private key.
                            Register for reCAPTCHA keys at <a href="http://recaptcha.net">reCAPTCHA.net</a>.
                        </p>
                    </div>
                    @*
                        @ReCaptcha.GetHtml("PUBLIC_KEY", theme: "white")
                        @Html.ValidationMessage("recaptcha")
                    *@
                </li>
            </ol>
            <input type="submit" value="Sign up" />
        </fieldset>
    </form>

    @*@RenderPage("~/Account/_ExternalLoginsList.cshtml")*@
</section>
