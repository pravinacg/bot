@* Remove this section if you are using bundling *@
@section Scripts {
    <script src="~/Scripts/jquery.validate.min.js"></script>
    <script src="~/Scripts/jquery.validate.unobtrusive.min.js"></script>
    @*<link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/css/bootstrap.min.css">
        <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
        <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.0/umd/popper.min.js"></script>
        <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/js/bootstrap.min.js"></script>
        <link rel="stylesheet" href="custom-style.css" type="text/css" />*@
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css">
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/js/bootstrap.min.js"></script>
    <!--<link rel="stylesheet" href="custom-style.css" type="text/css" />-->
    <script type="text/javascript" src="custom.js"></script>


}
<style>
    input.transparent-input {
        background-color: rgba(0,0,0,0) !important;
        border: none !important;
    }
</style>
@{
    Layout = "~/_SiteLayoutLogin.cshtml";
    Page.Title = "Log in";

    // Initialize general page variables
    var email = "";
    var password = "";
    var rememberMe = false;

    var returnUrl = Request.QueryString["ReturnUrl"];
    if (returnUrl.IsEmpty())
    {
        // Some external login providers always require a return URL value
        returnUrl = Href("~/Account/Register.cshtml");
    }

}

<div class="container">
    <div class="row">
        <div class="mob-logo-wrapper">
            <img class="site-logo" src="site-logo.png">
        </div>
        <div class="wrap">
            <div class="col-md-12">
                <div id="tab-container" class="top-tab-container">
                    <ul class="nav nav-tabs nav-justified" role="tablist">
                        <li class="tab active"><a href="#sign-in" role="tab" data-toggle="tab">Sign In</a></li>
                        <li class="tab"><a href="#sign-up" role="tab" data-toggle="tab">Sign Up</a></li>
                    </ul>
                </div>
                <div class="tab-content">
                    <div class="col-md-6 col-sm-6" id="sign-in">
                        <div id="signin-logo">
                            <img class="site-logo" src="site-logo.png" />
                        </div>
                        <div id="sign-in-heading">
                            <p>Hello There,</p>
                            <p>Welcome to Sogeti</p>
                        </div>
                        @if (IsPost && Request.Form.Count <= 4)
                        {

                            email = Request.Form["email"];
                            password = Request.Form["password"];
                            rememberMe = Request.Form["rememberMe"].AsBool();


                            // Setup validation
                            Validation.RequireField("email", "You must specify an email address.");
                            Validation.RequireField("password", "You must specify a password.");
                            Validation.Add("password",
                            Validator.StringLength(
                            maxLength: Int32.MaxValue,
                            minLength: 6,
                            errorMessage: "Password must be at least 6 characters"));

                            AntiForgery.Validate();

                            // is this an external login request?
                            string provider = Request.Form["provider"];
                            if (!provider.IsEmpty())
                            {
                                OAuthWebSecurity.RequestAuthentication(provider, Href("~/Account/RegisterService", new { returnUrl }));
                                return;
                            }
                            else if (Validation.IsValid())
                            {

                                if (WebSecurity.UserExists(email) && WebSecurity.GetPasswordFailuresSinceLastSuccess(email) > 4 && WebSecurity.GetLastPasswordFailureDate(email).AddSeconds(60) > DateTime.UtcNow)
                                {
                                    Response.Redirect("~/Account/AccountLockedOut");
                                    return;
                                }

                                // Attempt to log in using provided credentials
                                if (WebSecurity.Login(email, password, rememberMe))
                                {
                                    Context.RedirectLocal(returnUrl);
                                    return;
                                }
                                else
                                {
                                    ModelState.AddFormError("The user name or password provided is incorrect.");
                                    @Html.ValidationSummary("Log in was unsuccessful. Please correct the errors and try again.", excludeFieldErrors: true, htmlAttributes: null)

                                }
                            }

                        }

                        <form class="signin" id="signin-form" method="post">

                            @AntiForgery.GetHtml()

                            <legend id="legend-signin">Sign In</legend>

                            <div class="form-group">
                                <label for="email">Email address</label>
                                <input type="text" class="form-control transparent-input" id="email" name="email" value="@email" @Validation.For("email") />
                                @* Write any user name validation errors to the page *@
                                @Html.ValidationMessage("email")

                            </div>
                            <hr />
                            <div class="form-group">
                                <label for="password" @if (!ModelState.IsValidField("password")) { <text> class="form-label" </text> }>Password</label>
                                <input type="password" class="form-control transparent-input" id="password" name="password" @Validation.For("password") />
                                @* Write any password validation errors to the page *@
                                @Html.ValidationMessage("password")
                            </div>
                            <div class="form-group">
                                <input type="submit" name="SignIn" value="Sign in" />
                            </div>
                            <div class="forgot-password-container">
                                <p class="forgot-password-wrapper">
                                    <a href="~/Account/ForgotPassword.cshtml">Forgot Password ?</a>
                                </p>
                            </div>
                        </form>
                    </div>

                    <div class="separator"></div>
                    <div class="col-md-6 col-sm-6" id="sign-up">
                        <div id="sign-up-heading">
                            <p class="signup-first-para">Not Registered ?</p>
                            <p class="form-heading">Sign Up</p>
                        </div>
                        @AntiForgery.GetHtml()

                        <!--<h1>Register</h1>-->
                        @if (IsPost && Request.Form.Count > 4)
                        {
                            @Html.ValidationSummary("Account creation was unsuccessful. Please correct the errors and try again.", excludeFieldErrors: true, htmlAttributes: null)

                            // If this is a POST request, validate and process data
                            if (IsPost)
                            {

                                var confirmPassword = "";
                                var name = "";
                                // Setup validation
                                Validation.RequireField("name", "enter name.");

                                Validation.RequireField("email1", "Yp an email address.");
                                Validation.RequireField("password1", "Password cannot be blank.");
                                Validation.Add("confirmPassword",
                                Validator.EqualsTo("password1", "Password and confirmation password do not match."));
                                Validation.Add("password1",
                                    Validator.StringLength(
                                        maxLength: Int32.MaxValue,
                                        minLength: 6,
                                        errorMessage: "Password must be at least 6 characters"));


                                //AntiForgery.Validate();
                                name = Request.Form["name"];
                                email = Request.Form["email1"];
                                password = Request.Form["password1"];
                                confirmPassword = Request.Form["confirmPassword"];

                                // Validate the user's captcha answer
                                // if (!ReCaptcha.Validate("PRIVATE_KEY")) {
                                //     ModelState.AddError("recaptcha", "Captcha response was not correct");
                                // }

                                // If all information is valid, create a new account
                                if (Validation.IsValid())
                                {
                                    // Insert a new user into the database
                                    var db = Database.Open("StarterSite");

                                    // Check if user already exists
                                    var user = db.QuerySingle("SELECT Email FROM UserProfile WHERE LOWER(Email) = LOWER(@0)", email);
                                    if (user == null)
                                    {
                                        // Insert email into the profile table
                                        db.Execute("INSERT INTO UserProfile ([Email],[password],[firstname]) VALUES ('" + email + "','" + password + "','" + name + "')");

                                        // Create and associate a new entry in the membership database.
                                        // If successful, continue processing the request
                                        try
                                        {
                                            bool requireEmailConfirmation = !WebMail.SmtpServer.IsEmpty();
                                            var token = WebSecurity.CreateAccount(email, password, requireEmailConfirmation);
                                            if (requireEmailConfirmation)
                                            {
                                                var hostUrl = Request.Url.GetComponents(UriComponents.SchemeAndServer, UriFormat.Unescaped);
                                                var confirmationUrl = hostUrl + VirtualPathUtility.ToAbsolute("~/Account/Confirm?confirmationCode=" + HttpUtility.UrlEncode(token));

                                                WebMail.Send(
                                                    to: email,
                                                    subject: "Please confirm your account",
                                                    body: "Your confirmation code is: " + token + ". Visit <a href=\"" + confirmationUrl + "\">" + confirmationUrl + "</a> to activate your account."
                                                );
                                            }

                                            if (requireEmailConfirmation)
                                            {
                                                // Thank the user for registering and let them know an email is on its way
                                                Response.Redirect("~/Account/Thanks");
                                            }
                                            else
                                            {
                                                // Navigate back to the homepage and exit
                                                WebSecurity.Login(email, password);

                                                Response.Redirect("~/Account/Register");
                                            }
                                        }
                                        catch (System.Web.Security.MembershipCreateUserException e)
                                        {
                                            ModelState.AddFormError(e.Message);
                                        }
                                    }
                                    else
                                    {
                                        // User already exists
                                        @Html.ValidationSummary(false)
                                        ModelState.AddFormError("Email address is already in use.");
                                        @Html.ValidationSummary("Email address is already in use.", excludeFieldErrors: true, htmlAttributes: null)

                                    }
                                }
                            }
                        }

                        <form method="post" class="signup" id="signup-form">
                            <asp:Panel runat="server" DefaultButton="SignUp">
                                <div class="form-group">
                                    <label for="Name" @if (!ModelState.IsValidField("name")) { <text> class="form-label" </text> }>Name</label>
                                    <input type="text" class="form-control transparent-input" name="name" required>
                                    @Html.ValidationMessage("Name")
                                </div>
                                <hr />
                                <div class="form-group">
                                    <label for="email1" @if (!ModelState.IsValidField("email1")) { <text> class="form-label" </text> }>Email Address</label>
                                    <input type="text" id="email1" class="form-control transparent-input" name="email1" required>
                                    @Html.ValidationMessage("email1")

                                </div>
                                <hr />
                                <div class="form-group">
                                    <label for="Password1" @if (!ModelState.IsValidField("password1")) { <text> class="form-label" </text> }>Password</label>
                                    <input type="password" id="password1" class="form-control transparent-input" @Validation.For("password1") name="Password1" required>
                                    @Html.ValidationMessage("password1")

                                </div>
                                <hr />
                                <div class="form-group">
                                    <label for="ConfirmPassword" @if (!ModelState.IsValidField("confirmPassword")) { <text> class="form-label" </text> }>Confirm Password</label>
                                    <input type="password" id="confirmPassword" class="form-control transparent-input" name="ConfirmPassword" @Validation.For("confirmPassword") required>
                                    @Html.ValidationMessage("confirmPassword")

                                </div>
                                <div class="form-group">
                                    <input type="submit" id="SignUp" name="SignUp" value="Sign Up" />
                                </div>
                            </asp:Panel>
                        </form>



                    </div>
                </div>
            </div>
        </div>
    </div>
</div>






